name: CI

# Controls when the workflow will run
on:
  schedule:
    - cron: '0 0 * * WED'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # This workflow contains a single job called "build"
  init:
    runs-on: ubuntu-latest
    container: ghcr.io/kreatolinux/builder
    outputs:
      matrix: ${{ steps.compute-matrix.outputs.matrix }}
      push: ${{ steps.compute-matrix.outputs.push }}
      should_build: ${{ steps.compute-matrix.outputs.should_build }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
     

      - name: Compute matrix and flags
        id: compute-matrix
        run: |
          set -e
          cd "$GITHUB_WORKSPACE"
          git config --global --add safe.directory "$GITHUB_WORKSPACE" || true
          PUSH="true"
          EVENT_NAME="${{ github.event_name }}"
          SHOULD_BUILD="true"

          # Build the default full matrix by scanning for */run files (BusyBox find compatible)
          ALL_RUNS=$(find "$GITHUB_WORKSPACE" -mindepth 2 -maxdepth 2 -type f -name run | sed "s#^$GITHUB_WORKSPACE/##" | sort || true)
          ALL_PACKAGES=$(echo "$ALL_RUNS" | awk -F/ '{print $1}' | sort -u | awk 'NF')
          MAX_MATRIX=250
          PACKAGES=$(echo "$ALL_PACKAGES" | head -n "$MAX_MATRIX")
          MATRIX='{"include":['
          SEP=""
          for pkg in $PACKAGES; do
            MATRIX="$MATRIX$SEP{\"packages\":\"$pkg\"}"
            SEP=",";
          done
          MATRIX="$MATRIX]}"

          if [ "$EVENT_NAME" = "pull_request" ]; then
            PUSH="false"
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            git fetch --no-tags --depth=1 origin "$BASE_SHA" "$HEAD_SHA" || true
            MERGE_BASE=$(git merge-base "$BASE_SHA" "$HEAD_SHA" || true)
            if [ -n "$MERGE_BASE" ]; then
              CHANGED_FILES=$(git diff --name-only "$BASE_SHA...$HEAD_SHA" || true)
            else
              CHANGED_FILES=$(git show --name-only --pretty=format: "$HEAD_SHA" | tail -n +2 || true)
            fi
          elif [ "$EVENT_NAME" = "push" ]; then
            BEFORE_SHA="${{ github.event.before }}"
            if git cat-file -e "$BEFORE_SHA^{commit}" 2>/dev/null; then
              CHANGED_FILES=$(git diff --name-only "$BEFORE_SHA" "${{ github.sha }}" || true)
            else
              CHANGED_FILES=$(git show --name-only --pretty=format: "${{ github.sha }}" | tail -n +2 || true)
            fi
          else
            CHANGED_FILES=""
          fi

          RUNFILES=$(echo "$CHANGED_FILES" | grep -E '^[^/]+/run$' || true)
          RUN_PKG_COUNT=$(echo "$RUNFILES" | awk -F/ '{print $1}' | sort -u | awk 'NF' | wc -l | tr -d ' ')
          TOTAL_CHANGED_COUNT=$(echo "$CHANGED_FILES" | awk 'NF' | wc -l | tr -d ' ')
          SINGLE_RUN_PKG=$(echo "$RUNFILES" | head -n1 | cut -d/ -f1)

          if [ "$EVENT_NAME" = "pull_request" ]; then
            if [ "$RUN_PKG_COUNT" = "1" ]; then
              MATRIX="{\"include\":[{\"packages\":\"$SINGLE_RUN_PKG\"}]}"
            else
              SHOULD_BUILD="false"
            fi
          elif [ "$EVENT_NAME" = "push" ] && [ "${{ github.ref }}" = "refs/heads/master" ]; then
            if [ "$RUN_PKG_COUNT" = "1" ] && [ "$TOTAL_CHANGED_COUNT" = "1" ]; then
              MATRIX="{\"include\":[{\"packages\":\"$SINGLE_RUN_PKG\"}]}"
            else
              SHOULD_BUILD="false"
            fi
          elif [ "$EVENT_NAME" = "schedule" ]; then
            : # keep defaults
          fi

          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "push=$PUSH" >> $GITHUB_OUTPUT
          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

  build:
    if: needs.init.outputs.should_build == 'true'
    needs: init
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/kreatolinux/builder-repo@sha256:5c98776845d18b874e70f412d0adfbb2848eee811594752e1f3f3f6f617101c2 #-gnu # builder-gnu doesn't work yet, see TODO in kpkg/modules/isolation
      options: --privileged -v /:/opt/host
    strategy:
      fail-fast: false
      matrix:  ${{fromJson(needs.init.outputs.matrix)}}
    permissions:
      contents: write
    steps:

      - name: Remove useless directories
        run: |        
            for i in /opt/host/$AGENT_TOOLSDIRECTORY /opt/host/opt/google/chrome /opt/host/opt/microsoft/msedge /opt/host/opt/microsoft/powershell /opt/host/opt/pipx /opt/host/usr/lib/mono /opt/host/usr/local/julia* /opt/host/usr/local/lib/android /opt/host/usr/local/lib/node_modules /opt/host/usr/local/share/chromium /opt/host/usr/local/share/powershell /opt/host/usr/share/dotnet /opt/host/usr/share/swift; do
              rm -rf $i || true
            done
        env:
          AGENT_TOOLSDIRECTORY: ${{ runner.tool_cache }}

           

      - uses: actions/download-artifact@v4
        with:
          name: kpkg-amd64-linux-debug
          path: /tmp/kpkg-bin
          github-token: ${{ secrets.GH_PAT }} # token with actions:read permissions on target repo
          repository: kreatolinux/src
          run-id: 16851094530 # TODO: Automatically update to latest nightly

      - uses: actions/checkout@v4

      - name: Build packages
        run: |
          LOCALE=en_US
          mkdir -p /usr/lib/locale
          localedef -i $LOCALE -c -f UTF-8 $LOCALE
          echo "export LANG=$LOCALE.UTF-8" >> /etc/profile          
          
          . /etc/profile
          
          export LC_CTYPE=en_US.UTF-8
          export LC_ALL=en_US.UTF-8

          chmod +x /tmp/kpkg-bin/kpkg
          mkdir -p /etc/kpkg/repos/main
          mount --bind "$GITHUB_WORKSPACE" /etc/kpkg/repos/main

          
          #kpkg upgrade --yes || true
          
          /tmp/kpkg-bin/kpkg clean --binaries=true --environment=true
          
          IS_USELESS="true"
          
          for package in ${{ matrix.packages }}; do
                /tmp/kpkg-bin/kpkg install "$package" -y --downloadOnly || IS_USELESS="false"
          done

          git config --system --add safe.directory '*'

          if [ "$IS_USELESS" = "true" ]; then
              mkdir -p /var/cache/kpkg/archives
              touch /var/cache/kpkg/archives/IS_USELESS
              exit 0
          fi
          
          /tmp/kpkg-bin/kpkg build ${{ matrix.packages }} --yes --ignorePostInstall --forceInstallAll=true
          #echo RANDOM_ID=$(cat /dev/urandom | tr -dc '[:alpha:]' | fold -w ${1:-20} | head -n 1) >> $GITHUB_ENV
          cd "$GITHUB_WORKSPACE"
          git pull
          git status

      - name: Install MinIO Client
        if: needs.init.outputs.push == 'true'
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          mv mc /bin/
          mc config host rm minio || true
          
      - name: Configure MinIO Client
        if: needs.init.outputs.push == 'true'
        run: "mc alias set minio ${{ secrets.AWS_ENDPOINT }} ${{ secrets.AWS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }}"


      - name: Upload packages through MinIO
        if: needs.init.outputs.push == 'true'
        run: |
          if [ -d "/var/cache/kpkg/archives" ]; then
            echo "Listing archives directory contents:"
            ls -la /var/cache/kpkg/archives/
            echo "Copying archives..."
            mc cp --recursive /var/cache/kpkg/archives/* minio/${{ secrets.AWS_BUCKET }}/archives/
          else
            echo "Archives directory does not exist, skipping..."
          fi

          if [ -d "/var/cache/kpkg/sources" ]; then
            echo "Listing sources directory contents:"
            ls -la /var/cache/kpkg/sources/
            echo "Copying sources..."
            mc cp --recursive /var/cache/kpkg/sources/* minio/${{ secrets.AWS_BUCKET }}/sources/
          else
            echo "Sources directory does not exist, skipping..."
          fi

      #- uses: actions/upload-artifact@v4
      #  with:
      #    name: packages-${{ env.RANDOM_ID }}
      #    path: /var/cache/kpkg/archives/arch
      #    retention-days: 2
      