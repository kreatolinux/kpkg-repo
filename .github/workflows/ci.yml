name: CI

# Controls when the workflow will run
on:
  schedule:
    - cron: '0 0 * * WED'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  init:
    runs-on: ubuntu-latest
    container: ghcr.io/kreatolinux/builder
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
     
      - name: Initialize chkupd 
        id: set-matrix
        run: |
          rm -rf src
          git clone https://github.com/kreatolinux/src
          cd src
          sed -i s/stable/master/g Makefile
          nimble install cligen fuzzy nimcrypto -y
          ./build.sh -d -p "chkupd"
          mv out/chkupd /tmp/
          cd ..
          rm -rf src
          cd /tmp/
          ./chkupd generateJson --limit 250 --repo="$GITHUB_WORKSPACE" --output="/tmp/out1.json"
          echo "matrix=$(cat /tmp/out1.json)" >> $GITHUB_OUTPUT
      
      - uses: actions/upload-artifact@master
        with:
          name: chkupd-bin
          path: /tmp/chkupd

        #- name:  
          #- name: Check all packages against Arch Repositories
          #run: |
          #export DOCKER_DEFAULT_PLATFORM=linux/amd64
          #cd /tmp/
          #./chkupd checkAll --jsonPath=/tmp/chkupd.json --backend="arch" --repo="$GITHUB_WORKSPACE"
          #echo "# Arch check results" >> /tmp/chkupd.md
          #./out/chkupd jsonToMd /tmp/chkupd.json >> /tmp/chkupd.md
          #rm -rf chkupd
          
          
            #- name: Create Pull Request
            #uses: peter-evans/create-pull-request@v5.0.2
            #with:
            #commit-message: "[CI] Automated update by chkupd"

  build:
    needs: init
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/kreatolinux/builder-repo@sha256:5c98776845d18b874e70f412d0adfbb2848eee811594752e1f3f3f6f617101c2 #-gnu # builder-gnu doesn't work yet, see TODO in kpkg/modules/isolation
      options: --privileged -v /:/opt/host
    strategy:
      fail-fast: false
      matrix:  ${{fromJson(needs.init.outputs.matrix)}}
    permissions:
      contents: write
    steps:

      - name: Remove useless directories
        run: |        
            for i in /opt/host/$AGENT_TOOLSDIRECTORY /opt/host/opt/google/chrome /opt/host/opt/microsoft/msedge /opt/host/opt/microsoft/powershell /opt/host/opt/pipx /opt/host/usr/lib/mono /opt/host/usr/local/julia* /opt/host/usr/local/lib/android /opt/host/usr/local/lib/node_modules /opt/host/usr/local/share/chromium /opt/host/usr/local/share/powershell /opt/host/usr/share/dotnet /opt/host/usr/share/swift; do
              rm -rf $i || true
            done
        env:
          AGENT_TOOLSDIRECTORY: ${{ runner.tool_cache }}

           

      - uses: actions/download-artifact@v4
        with:
          name: kpkg-amd64-linux-debug
          path: /tmp/kpkg-bin
          github-token: ${{ secrets.GH_PAT }} # token with actions:read permissions on target repo
          repository: kreatolinux/src
          run-id: 16301062958 # TODO: Automatically update to latest nightly
  
      - uses: actions/download-artifact@v4
        with:
          name: chkupd-bin
          path: /tmp/chkupd

      - uses: actions/checkout@v4

      - name: Build packages
        run: |
          LOCALE=en_US
          mkdir -p /usr/lib/locale
          localedef -i $LOCALE -c -f UTF-8 $LOCALE
          echo "export LANG=$LOCALE.UTF-8" >> /etc/profile          
          
          . /etc/profile
          
          export LC_CTYPE=en_US.UTF-8
          export LC_ALL=en_US.UTF-8

          chmod +x /tmp/chkupd/chkupd
          chmod +x /tmp/kpkg-bin/kpkg
          mkdir -p /etc/kpkg/repos/main
          mount --bind "$GITHUB_WORKSPACE" /etc/kpkg/repos/main

          for package in ${{ matrix.packages }}; do
              grep "NO_CHKUPD=" "$GITHUB_WORKSPACE/$package/run" > /tmp/sourced_chkupd || NO_CHKUPD=false
              . /tmp/sourced_chkupd
            case $NO_CHKUPD in
                "y" | "yes" | "true" | "1" | "on")
                    echo "no_chkupd enabled on $package"
                    echo "skipping autoupdate"
                ;;
                *)
                  /tmp/chkupd/chkupd check --package="$package" --repo="$GITHUB_WORKSPACE" --autoUpdate=true --backend="repology"
                ;;
            esac
            unset NO_CHKUPD
            rm -f /tmp/sourced_chkupd
          done
          
          #kpkg upgrade --yes || true
          
          /tmp/kpkg-bin/kpkg clean --binaries=true --environment=true
          
          IS_USELESS="true"
          
          for package in ${{ matrix.packages }}; do
                /tmp/kpkg-bin/kpkg install "$package" -y --downloadOnly || IS_USELESS="false"
          done

          git config --system --add safe.directory '*'

          if [ "$IS_USELESS" = "true" ]; then
              mkdir -p /var/cache/kpkg/archives
              touch /var/cache/kpkg/archives/IS_USELESS
              exit 0
          fi
          
          /tmp/kpkg-bin/kpkg build ${{ matrix.packages }} --yes --ignorePostInstall --forceInstallAll=true
          #echo RANDOM_ID=$(cat /dev/urandom | tr -dc '[:alpha:]' | fold -w ${1:-20} | head -n 1) >> $GITHUB_ENV
          cd "$GITHUB_WORKSPACE"
          git pull
          git status

      - name: Install MinIO Client
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          mv mc /bin/
          mc config host rm minio || true
          
      - name: Configure MinIO Client
        run: "mc alias set minio ${{ secrets.AWS_ENDPOINT }} ${{ secrets.AWS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }}"


      - name: Upload packages through MinIO
        run: |
          if [ -d "/var/cache/kpkg/archives" ]; then
            echo "Listing archives directory contents:"
            ls -la /var/cache/kpkg/archives/
            echo "Copying archives..."
            mc cp --recursive /var/cache/kpkg/archives/* minio/${{ secrets.AWS_BUCKET }}/archives/
          else
            echo "Archives directory does not exist, skipping..."
          fi

          if [ -d "/var/cache/kpkg/sources" ]; then
            echo "Listing sources directory contents:"
            ls -la /var/cache/kpkg/sources/
            echo "Copying sources..."
            mc cp --recursive /var/cache/kpkg/sources/* minio/${{ secrets.AWS_BUCKET }}/sources/
          else
            echo "Sources directory does not exist, skipping..."
          fi

      #- uses: actions/upload-artifact@v4
      #  with:
      #    name: packages-${{ env.RANDOM_ID }}
      #    path: /var/cache/kpkg/archives/arch
      #    retention-days: 2
      
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Apply auto-update through chkupd
